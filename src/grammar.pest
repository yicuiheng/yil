program = { func+ }

func = { kw_rec? ~ kw_func ~ ident ~ refine_type* ~ colon ~ refine_type ~ paren_expr }

refine_type = { left_paren ~ ident ~ colon ~ base_type ~ bar ~ formula ~ right_paren }

formula = { and_formula ~ (or ~ and_formula)* }
and_formula = { binop_formula ~ (and ~ binop_formula)* }
binop_formula = { kw_true | kw_false | (additive_logical_expr ~ (eq | neq | lt | leq | gt | geq) ~ additive_logical_expr) }
additive_logical_expr = { multive_logical_expr ~ ((plus | minus) ~ multive_logical_expr)* }
multive_logical_expr = { primary_logical_expr ~ ((ast | slash) ~ primary_logical_expr)* }
primary_logical_expr = { ident | constant | left_paren ~ additive_logical_expr ~ right_paren }

base_type = { kw_int }

expr = { or_expr }

or_expr = { and_expr ~ (or ~ and_expr)* }
and_expr = { comp_expr ~ (and ~ comp_expr)* }
comp_expr = { additive_expr ~ ((eq | neq | lt | leq | gt | geq) ~ additive_expr)* }

additive_expr = { multive_expr ~ ((plus | minus) ~ multive_expr)* }
multive_expr = { apply_expr ~ ((ast | slash) ~ apply_expr)* }

apply_expr = { primary_expr ~ primary_expr* }

primary_expr = {
    ifz_expr |
    let_expr |
    constant |
    variable |
    paren_expr
}

ifz_expr = { kw_ifz ~ expr ~ kw_then ~ expr ~ kw_else ~ expr }
let_expr = { kw_let ~ ident ~ equal ~ expr ~ kw_in ~ expr }
constant = @{ digit+ }
variable = { ident }
paren_expr = { left_paren ~ expr ~ right_paren }

left_paren = { "(" }
right_paren = { ")" }
left_brace = { "{" }
right_brace = { "}" }
plus = { "+" }
minus = { "-" }
ast = { "*" }
slash = { "/" }
or = { "|" }
and = { "&" }
equal = { "=" }
eq = { "=" }
neq = { "<>" }
lt = { "<" }
leq = { "<=" }
gt = { ">" }
geq = { ">=" }
colon = { ":" }
bar = { "|" }


kw_ifz = { "ifz" }
kw_then = { "then" }
kw_else = { "else" }
kw_let = { "let" }
kw_in = { "in" }
kw_rec = { "rec" }
kw_func = { "func" }
kw_int = { "int" }
kw_true = { "true" }
kw_false = { "false" }

keyword = { kw_ifz | kw_then | kw_else | kw_let | kw_in | kw_rec | kw_func | kw_int | kw_true | kw_false }

alpha = {'a'..'z' | 'A'..'Z'}
digit = {'0'..'9'}

ident_tail = { alpha | digit }

ident = @{ !keyword ~ alpha ~ ident_tail* }

WHITESPACE = _{ " " | "\t" | "\n" }

inline_comment = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" }
multiline_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

COMMENT = _{ inline_comment | multiline_comment }

