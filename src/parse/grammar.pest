program = { SOI ~ func+ ~ EOI }

func = { kw_rec? ~ kw_func ~ name ~ refine_type+ ~ colon ~ refine_type ~ equal ~ expr }

refine_type = {
    base_refine_type |
    func_refine_type |
    left_paren ~ refine_type ~ right_paren }

base_refine_type = { left_paren ~ name ~ colon ~ (kw_int|kw_bool) ~ bar ~ term ~ right_paren }
func_refine_type = { left_paren ~ name ~ colon ~ refine_type ~ (arrow ~ refine_type)+ ~ right_paren }

term = { and_term ~ (or ~ and_term)* }
and_term = { imply_term ~ (and ~ imply_term)* }
imply_term = { not_term ~ (fat_arrow ~ not_term)* }
not_term = { (exclamation ~ binpred_term) | binpred_term }
binpred_term = {
    (additive_term ~ (eq | neq | leq | lt | geq | gt) ~ additive_term) |
    (left_paren ~ term ~ right_paren) |
    kw_true | kw_false | name }
additive_term = { multive_term ~ ((plus | minus) ~ multive_term)* }
multive_term = { primary_term ~ ((ast | slash | percent) ~ primary_term)* }
primary_term = { name | number | left_paren ~ additive_term ~ right_paren }

expr = {
    let_expr |
    or_expr }

expr_for_debug = { SOI ~ expr ~ EOI }

let_expr = { kw_let ~ name ~ equal ~ expr ~ kw_in ~ expr }

or_expr = { and_expr ~ (or ~ and_expr)* }
and_expr = { comp_expr ~ (and ~ comp_expr)* }
comp_expr = { additive_expr ~ ((eq | neq | leq | lt | geq | gt) ~ additive_expr)* }

additive_expr = { multive_expr ~ ((plus | minus) ~ multive_expr)* }
multive_expr = { apply_expr ~ ((ast | slash | percent) ~ apply_expr)* }

apply_expr = { primary_expr+ }

primary_expr = {
    if_expr |
    number |
    kw_true |
    kw_false |
    variable |
    paren_expr
}

if_expr = { kw_if ~ expr ~ left_brace ~ expr ~ right_brace ~ kw_else ~ left_brace ~ expr ~ right_brace }
number = @{ minus? ~ digit+ }
variable = { name }
paren_expr = { left_paren ~ expr ~ right_paren }

left_paren = { "(" }
right_paren = { ")" }
left_brace = { "{" }
right_brace = { "}" }
plus = { "+" }
minus = { "-" }
ast = { "*" }
slash = { "/" }
percent = { "%" }
or = { "||" }
and = { "&&" }
exclamation = { "!" }
equal = { "=" }
eq = { "=" }
neq = { "!=" }
lt = { "<" }
leq = { "<=" }
gt = { ">" }
geq = { ">=" }
colon = { ":" }
comma = { "," }
bar = { "|" }
arrow = { "->" }
fat_arrow = { "=>" }

kw_if = { "if" }
kw_else = { "else" }
kw_let = { "let" }
kw_in = { "in" }
kw_rec = { "rec" }
kw_func = { "func" }
kw_int = { "int" }
kw_bool = { "bool" }
kw_true = { "true" }
kw_false = { "false" }

keyword = { kw_if | kw_else | kw_let | kw_in | kw_rec | kw_func | kw_int | kw_bool | kw_true | kw_false }

alpha = {'a'..'z' | 'A'..'Z'}
digit = {'0'..'9'}

name_tail = { alpha | digit | "_" }

name = @{ !keyword ~ alpha ~ name_tail* }

WHITESPACE = _{ " " | "\t" | "\n" }

inline_comment = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" }
multiline_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

COMMENT = _{ inline_comment | multiline_comment }

